<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4000/" rel="alternate" type="text/html" /><updated>2024-03-21T05:06:31+00:00</updated><id>http://0.0.0.0:4000/feed.xml</id><title type="html">Joel Salazar</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Build a Jekyll blog using Docker</title><link href="http://0.0.0.0:4000/coding/2024/03/20/build-a-jekyll-blog-using-docker.html" rel="alternate" type="text/html" title="Build a Jekyll blog using Docker" /><published>2024-03-20T23:00:00+00:00</published><updated>2024-03-20T23:00:00+00:00</updated><id>http://0.0.0.0:4000/coding/2024/03/20/build-a-jekyll-blog-using-docker</id><content type="html" xml:base="http://0.0.0.0:4000/coding/2024/03/20/build-a-jekyll-blog-using-docker.html"><![CDATA[<p>Unleash the power of Docker for a hassle-free Jekyll blog setup and deployment. This technical guide will cover the essentials of using Docker containers to streamline your development workflow, ensuring a smooth transition from local development to live publication. Let’s get started! 🚀</p>

<p>First, let’s create a “dockerfile” with the necessary instructions to build our image.</p>

<figure class="highlight"><pre><code class="language-docker" data-lang="docker">  <span class="c"># Dockerfile for Jekyll using Ubuntu</span>
  FROM ubuntu:latest
  <span class="c"># Install necessary packages</span>
  RUN apt-get update &amp;&amp; \
      apt-get install -y ruby-full build-essential zlib1g-dev git &amp;&amp; \
      git config --global init.defaultBranch main
  <span class="c"># Install Jekyll and Bundler</span>
  RUN gem install bundler jekyll
  <span class="c"># Set the working directory inside the container</span>
  WORKDIR /srv/jekyll</code></pre></figure>

<p>Proceed to build the image “jekyll-ubuntu” using the command <code class="language-plaintext highlighter-rouge">&gt; docker build -t jekyll-ubuntu .</code></p>

<p>Run a container, mount the volume “ghpages”, and execute a “bash” terminal using this command</p>

<figure class="highlight"><pre><code class="language-docker" data-lang="docker">  &gt; docker run --rm -it -p 4000:4000 -p 35729:35729 -v ghpages:/srv/jekyll jekyll-ubuntu bash</code></pre></figure>

<p>Create a new jekyll site, then launch the local server</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">  <span class="nv">$ </span>jekyll new <span class="nb">.</span>
  <span class="nv">$ </span>bundle <span class="nb">exec </span>jekyll serve <span class="nt">--host</span> 0.0.0.0 <span class="nt">--livereload</span></code></pre></figure>

<p>If you already have an existing volume with a jekyll site, use <code class="language-plaintext highlighter-rouge">bundle install</code> instead of <code class="language-plaintext highlighter-rouge">jekyll new .</code> then launch the server</p>

<p>Finally, simply connect to the container via Visual Studio Code and designate “/srv/jekyll” as your workspace to begin crafting your Jekyll blog.</p>]]></content><author><name></name></author><category term="coding" /><summary type="html"><![CDATA[Unleash the power of Docker for a hassle-free Jekyll blog setup and deployment. This technical guide will cover the essentials of using Docker containers to streamline your development workflow, ensuring a smooth transition from local development to live publication. Let’s get started! 🚀]]></summary></entry></feed>